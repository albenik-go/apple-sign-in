run:
  timeout: 3m
  issues-exit-code: 1
  tests: true
  skip-dirs-use-default: true
  modules-download-mode: readonly
  allow-parallel-runners: false

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true

linters-settings:
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    check-blank: true

  exhaustive:
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true

  funlen:
    lines: 100
    statements: 50

  gci:
    local-prefixes: github.com/albenik/apple-signin-go

  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10

  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 4

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3

  godot:
    # check all top-level comments, not only declarations
    check-all: false

  gofmt:
    simplify: true

  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8

  govet:
    check-shadowing: true

    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    enable-all: true

  depguard:
    list-type: blacklist
    include-go-root: true
    packages:
      - errors
      - github.com/sirupsen/logrus
    packages-with-error-message:
      - errors: "use github.com/pkg/errors istead of native one"
      - github.com/sirupsen/logrus: "github.com/rs/zerolog used in this project"

  maligned:
    suggest-new: true

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - someword

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  nolintlint:
    allow-unused: false
    allow-leading-space: true
    require-explanation: false
    require-specific: true

  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx

  testpackage:
    skip-regexp: (export|internal)_test\.go

  unparam:
    check-exported: false

  unused:
    check-exported: false

  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0
    # Force cuddling of err checks with err var assignment
    force-err-cuddling: false
    # Allow leading comments to be separated with empty liens
    allow-separated-leading-comment: false

  gofumpt:
    extra-rules: true

linters:
  enable-all: true
  disable:
    - exhaustivestruct
    - gochecknoglobals
    - gocognit
    - godox
    - gomnd
    - lll
    - maligned
    - nlreturn
    - paralleltest
    - whitespace
    - wrapcheck
    - wsl
  fast: false

issues:
  exclude:
    - "G401"
    - "G501"
    - "G505"

  exclude-rules:
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    # Exclude some staticcheck messages
    - text: "SA9003:"
      linters:
        - staticcheck

    - source: "^//go:generate "
      linters:
        - lll

    - source: '_ "github.com/jackc/pgx/v4/stdlib"'
      linters:
        - golint

severity:
  default-severity: warning
